!function(t){var e={};function r(o){if(e[o])return e[o].exports;var s=e[o]={i:o,l:!1,exports:{}};return t[o].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=t,r.c=e,r.d=function(t,e,o){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(o,s,function(e){return t[e]}.bind(null,s));return o},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=1)}([function(t,e,r){"use strict";t.exports=function(t){return null!==t&&"object"==typeof t}},function(t,e,r){"use strict";var o=this&&this.__awaiter||function(t,e,r,o){return new(r||(r=Promise))(function(s,n){function i(t){try{u(o.next(t))}catch(t){n(t)}}function a(t){try{u(o.throw(t))}catch(t){n(t)}}function u(t){t.done?s(t.value):new r(function(e){e(t.value)}).then(i,a)}u((o=o.apply(t,e||[])).next())})},s=this&&this.__generator||function(t,e){var r,o,s,n,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return n={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function a(n){return function(a){return function(n){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,o&&(s=2&n[0]?o.return:n[0]?o.throw||((s=o.return)&&s.call(o),0):o.next)&&!(s=s.call(o,n[1])).done)return s;switch(o=0,s&&(n=[2&n[0],s.value]),n[0]){case 0:case 1:s=n;break;case 4:return i.label++,{value:n[1],done:!1};case 5:i.label++,o=n[1],n=[0];continue;case 7:n=i.ops.pop(),i.trys.pop();continue;default:if(!(s=(s=i.trys).length>0&&s[s.length-1])&&(6===n[0]||2===n[0])){i=0;continue}if(3===n[0]&&(!s||n[1]>s[0]&&n[1]<s[3])){i.label=n[1];break}if(6===n[0]&&i.label<s[1]){i.label=s[1],s=n;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(n);break}s[2]&&i.ops.pop(),i.trys.pop();continue}n=e.call(t,i)}catch(t){n=[6,t],o=0}finally{r=s=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,a])}}},n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i,a,u,h=n(r(2));function l(){document.getElementById("neo4jd3").innerHTML="",i=new Neo4jd3("#neo4jd3",{highlight:[],red_rel:[],icons:{"客户":"user",person:"user",Person:"user",Relation:"yelp","基金":"money","项目":"database",Company:"university",People:"handshake-o",stock:"credit-card",User:"user",Business:"yelp",Industry:"database",Shareholder:"money",Module:"database"},images:{Contributor:"https://eisman.github.io/neo4jd3/img/twemoji/1f38f.svg",Project:"https://eisman.github.io/neo4jd3/img/twemoji/1f5c3.svg"},minCollision:60,neo4jData:{results:[],errors:[]},nodeRadius:30,onNodeDoubleClick:y,onRelationshipDoubleClick:m,zoomFit:!1}),console.log("哈哈哈哈"),a=i.get_screen_height(),u=i.get_screen_width(),console.log(u,a)}var p="http://127.0.0.1:8000";function c(t){return t}function d(t){return o(this,void 0,void 0,function(){var e=this;return s(this,function(r){switch(r.label){case 0:return[4,h.default.get(p+"/get_json_by_node_id_and_depth_from_neo4j/?node_id="+t).then(function(t){return o(e,void 0,void 0,function(){return s(this,function(e){return[2,JSON.parse(t.text)]})})})];case 1:return[2,r.sent()]}})})}function f(t){return t}function y(t){var e;d(parseInt(t.id)).then(function(t){e=t;var r={nodes:[],relationships:[]};for(var o in e.nodes)r.nodes.push(c(e.nodes[o]));var s=[];for(var o in e.relationships)r.relationships.push(f(e.relationships[o])),"Recommend"==e.relationships[o].type&&s.push(e.relationships[o].id);console.log("important_rel",s),console.info(r),i.updateWithD3Data(r)})}function m(t){console.log("double click on relationship: ",t)}!function(t){var e;l(),e=t;var r={nodes:[],relationships:[]};for(var o in e.nodes)r.nodes.push(c(e.nodes[o]));var s=[];for(var o in e.relationships)r.relationships.push(f(e.relationships[o])),"Recommend"==e.relationships[o].type&&s.push(e.relationships[o].id);i.replaceWithD3Data(r,[1],s)}({nodes:[{labels:["Module"],id:1,properties:{name:"AS"},showName:"AS"},{labels:["Module"],id:2,properties:{name:"CCS"},showName:"CCS"},{labels:["Module"],id:3,properties:{name:"AAA"},showName:"AAA"},{labels:["Module"],id:4,properties:{name:"MDU"},showName:"MDU"},{labels:["Module"],id:5,properties:{name:"VOD"},showName:"VOD"},{labels:["Module"],id:6,properties:{name:"GBSG"},showName:"GBSG"},{labels:["Module"],id:7,properties:{name:"SA"},showName:"SA"}],relationships:[{startNode:1,endNode:3,source:1,target:3,id:101,type:"rel",properties:{},linknum:"1",showName:"544"},{startNode:1,endNode:2,source:1,target:2,id:102,type:"rel",properties:{},linknum:"1",showName:"543"},{startNode:4,endNode:5,source:4,target:5,id:103,type:"rel",properties:{},linknum:"1",showName:"70"},{startNode:4,endNode:7,source:4,target:7,id:104,type:"rel",properties:{},linknum:"1",showName:"70"},{startNode:4,endNode:6,source:4,target:6,id:105,type:"rel",properties:{},linknum:"1",showName:"70"},{startNode:5,endNode:3,source:5,target:3,id:106,type:"rel",properties:{},linknum:"1",showName:"70"},{startNode:5,endNode:6,source:5,target:6,id:107,type:"rel",properties:{},linknum:"1",showName:"70"},{startNode:2,endNode:3,source:2,target:3,id:108,type:"rel",properties:{},linknum:"1",showName:"70"},{startNode:2,endNode:6,source:2,target:6,id:109,type:"rel",properties:{},linknum:"1",showName:"70"}]})},function(t,e,r){let o;"undefined"!=typeof window?o=window:"undefined"!=typeof self?o=self:(console.warn("Using browser-only version of superagent in non-browser environment"),o=this);const s=r(3),n=r(4),i=r(0),a=r(5),u=r(7);function h(){}const l=e=t.exports=function(t,r){return"function"==typeof r?new e.Request("GET",t).end(r):1==arguments.length?new e.Request("GET",t):new e.Request(t,r)};e.Request=_,l.getXHR=(()=>{if(!(!o.XMLHttpRequest||o.location&&"file:"==o.location.protocol&&o.ActiveXObject))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(t){}throw Error("Browser-only version of superagent could not find XHR")});const p="".trim?t=>t.trim():t=>t.replace(/(^\s*|\s*$)/g,"");function c(t){if(!i(t))return t;const e=[];for(const r in t)d(e,r,t[r]);return e.join("&")}function d(t,e,r){if(null!=r)if(Array.isArray(r))r.forEach(r=>{d(t,e,r)});else if(i(r))for(const o in r)d(t,`${e}[${o}]`,r[o]);else t.push(encodeURIComponent(e)+"="+encodeURIComponent(r));else null===r&&t.push(encodeURIComponent(e))}function f(t){const e={},r=t.split("&");let o,s;for(let t=0,n=r.length;t<n;++t)-1==(s=(o=r[t]).indexOf("="))?e[decodeURIComponent(o)]="":e[decodeURIComponent(o.slice(0,s))]=decodeURIComponent(o.slice(s+1));return e}function y(t){return/[\/+]json($|[^-\w])/.test(t)}function m(t){this.req=t,this.xhr=this.req.xhr,this.text="HEAD"!=this.req.method&&(""===this.xhr.responseType||"text"===this.xhr.responseType)||void 0===this.xhr.responseType?this.xhr.responseText:null,this.statusText=this.req.xhr.statusText;let e=this.xhr.status;1223===e&&(e=204),this._setStatusProperties(e),this.header=this.headers=function(t){const e=t.split(/\r?\n/),r={};let o,s,n,i;for(let t=0,a=e.length;t<a;++t)-1!==(o=(s=e[t]).indexOf(":"))&&(n=s.slice(0,o).toLowerCase(),i=p(s.slice(o+1)),r[n]=i);return r}(this.xhr.getAllResponseHeaders()),this.header["content-type"]=this.xhr.getResponseHeader("content-type"),this._setHeaderProperties(this.header),null===this.text&&t._responseType?this.body=this.xhr.response:this.body="HEAD"!=this.req.method?this._parseBody(this.text?this.text:this.xhr.response):null}function _(t,e){const r=this;this._query=this._query||[],this.method=t,this.url=e,this.header={},this._header={},this.on("end",()=>{let t,e=null,o=null;try{o=new m(r)}catch(t){return(e=new Error("Parser is unable to parse the response")).parse=!0,e.original=t,r.xhr?(e.rawResponse=void 0===r.xhr.responseType?r.xhr.responseText:r.xhr.response,e.status=r.xhr.status?r.xhr.status:null,e.statusCode=e.status):(e.rawResponse=null,e.status=null),r.callback(e)}r.emit("response",o);try{r._isResponseOK(o)||(t=new Error(o.statusText||"Unsuccessful HTTP response"))}catch(e){t=e}t?(t.original=e,t.response=o,t.status=o.status,r.callback(t,o)):r.callback(null,o)})}function b(t,e,r){const o=l("DELETE",t);return"function"==typeof e&&(r=e,e=null),e&&o.send(e),r&&o.end(r),o}l.serializeObject=c,l.parseString=f,l.types={html:"text/html",json:"application/json",xml:"text/xml",urlencoded:"application/x-www-form-urlencoded",form:"application/x-www-form-urlencoded","form-data":"application/x-www-form-urlencoded"},l.serialize={"application/x-www-form-urlencoded":c,"application/json":JSON.stringify},l.parse={"application/x-www-form-urlencoded":f,"application/json":JSON.parse},a(m.prototype),m.prototype._parseBody=function(t){let e=l.parse[this.type];return this.req._parser?this.req._parser(this,t):(!e&&y(this.type)&&(e=l.parse["application/json"]),e&&t&&(t.length||t instanceof Object)?e(t):null)},m.prototype.toError=function(){const t=this.req,e=t.method,r=t.url,o=`cannot ${e} ${r} (${this.status})`,s=new Error(o);return s.status=this.status,s.method=e,s.url=r,s},l.Response=m,s(_.prototype),n(_.prototype),_.prototype.type=function(t){return this.set("Content-Type",l.types[t]||t),this},_.prototype.accept=function(t){return this.set("Accept",l.types[t]||t),this},_.prototype.auth=function(t,e,r){1===arguments.length&&(e=""),"object"==typeof e&&null!==e&&(r=e,e=""),r||(r={type:"function"==typeof btoa?"basic":"auto"});return this._auth(t,e,r,t=>{if("function"==typeof btoa)return btoa(t);throw new Error("Cannot use basic auth, btoa is not a function")})},_.prototype.query=function(t){return"string"!=typeof t&&(t=c(t)),t&&this._query.push(t),this},_.prototype.attach=function(t,e,r){if(e){if(this._data)throw Error("superagent can't mix .send() and .attach()");this._getFormData().append(t,e,r||e.name)}return this},_.prototype._getFormData=function(){return this._formData||(this._formData=new o.FormData),this._formData},_.prototype.callback=function(t,e){if(this._shouldRetry(t,e))return this._retry();const r=this._callback;this.clearTimeout(),t&&(this._maxRetries&&(t.retries=this._retries-1),this.emit("error",t)),r(t,e)},_.prototype.crossDomainError=function(){const t=new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");t.crossDomain=!0,t.status=this.status,t.method=this.method,t.url=this.url,this.callback(t)},_.prototype.buffer=_.prototype.ca=_.prototype.agent=function(){return console.warn("This is not supported in browser version of superagent"),this},_.prototype.pipe=_.prototype.write=(()=>{throw Error("Streaming is not supported in browser version of superagent")}),_.prototype._isHost=function(t){return t&&"object"==typeof t&&!Array.isArray(t)&&"[object Object]"!==Object.prototype.toString.call(t)},_.prototype.end=function(t){this._endCalled&&console.warn("Warning: .end() was called twice. This is not supported in superagent"),this._endCalled=!0,this._callback=t||h,this._finalizeQueryString(),this._end()},_.prototype._end=function(){if(this._aborted)return this.callback(Error("The request has been aborted even before .end() was called"));const t=this,e=this.xhr=l.getXHR();let r=this._formData||this._data;this._setTimeouts(),e.onreadystatechange=(()=>{const r=e.readyState;if(r>=2&&t._responseTimeoutTimer&&clearTimeout(t._responseTimeoutTimer),4!=r)return;let o;try{o=e.status}catch(t){o=0}if(!o){if(t.timedout||t._aborted)return;return t.crossDomainError()}t.emit("end")});const o=(e,r)=>{r.total>0&&(r.percent=r.loaded/r.total*100),r.direction=e,t.emit("progress",r)};if(this.hasListeners("progress"))try{e.onprogress=o.bind(null,"download"),e.upload&&(e.upload.onprogress=o.bind(null,"upload"))}catch(t){}try{this.username&&this.password?e.open(this.method,this.url,!0,this.username,this.password):e.open(this.method,this.url,!0)}catch(t){return this.callback(t)}if(this._withCredentials&&(e.withCredentials=!0),!this._formData&&"GET"!=this.method&&"HEAD"!=this.method&&"string"!=typeof r&&!this._isHost(r)){const t=this._header["content-type"];let e=this._serializer||l.serialize[t?t.split(";")[0]:""];!e&&y(t)&&(e=l.serialize["application/json"]),e&&(r=e(r))}for(const t in this.header)null!=this.header[t]&&this.header.hasOwnProperty(t)&&e.setRequestHeader(t,this.header[t]);this._responseType&&(e.responseType=this._responseType),this.emit("request",this),e.send(void 0!==r?r:null)},l.agent=(()=>new u),["GET","POST","OPTIONS","PATCH","PUT","DELETE"].forEach(t=>{u.prototype[t.toLowerCase()]=function(e,r){const o=new l.Request(t,e);return this._setDefaults(o),r&&o.end(r),o}}),u.prototype.del=u.prototype.delete,l.get=((t,e,r)=>{const o=l("GET",t);return"function"==typeof e&&(r=e,e=null),e&&o.query(e),r&&o.end(r),o}),l.head=((t,e,r)=>{const o=l("HEAD",t);return"function"==typeof e&&(r=e,e=null),e&&o.query(e),r&&o.end(r),o}),l.options=((t,e,r)=>{const o=l("OPTIONS",t);return"function"==typeof e&&(r=e,e=null),e&&o.send(e),r&&o.end(r),o}),l.del=b,l.delete=b,l.patch=((t,e,r)=>{const o=l("PATCH",t);return"function"==typeof e&&(r=e,e=null),e&&o.send(e),r&&o.end(r),o}),l.post=((t,e,r)=>{const o=l("POST",t);return"function"==typeof e&&(r=e,e=null),e&&o.send(e),r&&o.end(r),o}),l.put=((t,e,r)=>{const o=l("PUT",t);return"function"==typeof e&&(r=e,e=null),e&&o.send(e),r&&o.end(r),o})},function(t,e,r){function o(t){if(t)return function(t){for(var e in o.prototype)t[e]=o.prototype[e];return t}(t)}t.exports=o,o.prototype.on=o.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},o.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments)}return r.fn=e,this.on(t,r),this},o.prototype.off=o.prototype.removeListener=o.prototype.removeAllListeners=o.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,o=this._callbacks["$"+t];if(!o)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var s=0;s<o.length;s++)if((r=o[s])===e||r.fn===e){o.splice(s,1);break}return this},o.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),r=this._callbacks["$"+t];if(r)for(var o=0,s=(r=r.slice(0)).length;o<s;++o)r[o].apply(this,e);return this},o.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},o.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,r){"use strict";const o=r(0);function s(t){if(t)return function(t){for(const e in s.prototype)t[e]=s.prototype[e];return t}(t)}t.exports=s,s.prototype.clearTimeout=function(){return clearTimeout(this._timer),clearTimeout(this._responseTimeoutTimer),delete this._timer,delete this._responseTimeoutTimer,this},s.prototype.parse=function(t){return this._parser=t,this},s.prototype.responseType=function(t){return this._responseType=t,this},s.prototype.serialize=function(t){return this._serializer=t,this},s.prototype.timeout=function(t){if(!t||"object"!=typeof t)return this._timeout=t,this._responseTimeout=0,this;for(const e in t)switch(e){case"deadline":this._timeout=t.deadline;break;case"response":this._responseTimeout=t.response;break;default:console.warn("Unknown timeout option",e)}return this},s.prototype.retry=function(t,e){return 0!==arguments.length&&!0!==t||(t=1),t<=0&&(t=0),this._maxRetries=t,this._retries=0,this._retryCallback=e,this};const n=["ECONNRESET","ETIMEDOUT","EADDRINFO","ESOCKETTIMEDOUT"];s.prototype._shouldRetry=function(t,e){if(!this._maxRetries||this._retries++>=this._maxRetries)return!1;if(this._retryCallback)try{const r=this._retryCallback(t,e);if(!0===r)return!0;if(!1===r)return!1}catch(t){console.error(t)}if(e&&e.status&&e.status>=500&&501!=e.status)return!0;if(t){if(t.code&&~n.indexOf(t.code))return!0;if(t.timeout&&"ECONNABORTED"==t.code)return!0;if(t.crossDomain)return!0}return!1},s.prototype._retry=function(){return this.clearTimeout(),this.req&&(this.req=null,this.req=this.request()),this._aborted=!1,this.timedout=!1,this._end()},s.prototype.then=function(t,e){if(!this._fullfilledPromise){const t=this;this._endCalled&&console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"),this._fullfilledPromise=new Promise((e,r)=>{t.on("error",r),t.end((t,o)=>{t?r(t):e(o)})})}return this._fullfilledPromise.then(t,e)},s.prototype.catch=function(t){return this.then(void 0,t)},s.prototype.use=function(t){return t(this),this},s.prototype.ok=function(t){if("function"!=typeof t)throw Error("Callback required");return this._okCallback=t,this},s.prototype._isResponseOK=function(t){return!!t&&(this._okCallback?this._okCallback(t):t.status>=200&&t.status<300)},s.prototype.get=function(t){return this._header[t.toLowerCase()]},s.prototype.getHeader=s.prototype.get,s.prototype.set=function(t,e){if(o(t)){for(const e in t)this.set(e,t[e]);return this}return this._header[t.toLowerCase()]=e,this.header[t]=e,this},s.prototype.unset=function(t){return delete this._header[t.toLowerCase()],delete this.header[t],this},s.prototype.field=function(t,e){if(null==t)throw new Error(".field(name, val) name can not be empty");if(this._data)throw new Error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");if(o(t)){for(const e in t)this.field(e,t[e]);return this}if(Array.isArray(e)){for(const r in e)this.field(t,e[r]);return this}if(null==e)throw new Error(".field(name, val) val can not be empty");return"boolean"==typeof e&&(e=""+e),this._getFormData().append(t,e),this},s.prototype.abort=function(){return this._aborted?this:(this._aborted=!0,this.xhr&&this.xhr.abort(),this.req&&this.req.abort(),this.clearTimeout(),this.emit("abort"),this)},s.prototype._auth=function(t,e,r,o){switch(r.type){case"basic":this.set("Authorization",`Basic ${o(`${t}:${e}`)}`);break;case"auto":this.username=t,this.password=e;break;case"bearer":this.set("Authorization",`Bearer ${t}`)}return this},s.prototype.withCredentials=function(t){return null==t&&(t=!0),this._withCredentials=t,this},s.prototype.redirects=function(t){return this._maxRedirects=t,this},s.prototype.maxResponseSize=function(t){if("number"!=typeof t)throw TypeError("Invalid argument");return this._maxResponseSize=t,this},s.prototype.toJSON=function(){return{method:this.method,url:this.url,data:this._data,headers:this._header}},s.prototype.send=function(t){const e=o(t);let r=this._header["content-type"];if(this._formData)throw new Error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");if(e&&!this._data)Array.isArray(t)?this._data=[]:this._isHost(t)||(this._data={});else if(t&&this._data&&this._isHost(this._data))throw Error("Can't merge these send calls");if(e&&o(this._data))for(const e in t)this._data[e]=t[e];else"string"==typeof t?(r||this.type("form"),r=this._header["content-type"],this._data="application/x-www-form-urlencoded"==r?this._data?`${this._data}&${t}`:t:(this._data||"")+t):this._data=t;return!e||this._isHost(t)?this:(r||this.type("json"),this)},s.prototype.sortQuery=function(t){return this._sort=void 0===t||t,this},s.prototype._finalizeQueryString=function(){const t=this._query.join("&");if(t&&(this.url+=(this.url.indexOf("?")>=0?"&":"?")+t),this._query.length=0,this._sort){const t=this.url.indexOf("?");if(t>=0){const e=this.url.substring(t+1).split("&");"function"==typeof this._sort?e.sort(this._sort):e.sort(),this.url=this.url.substring(0,t)+"?"+e.join("&")}}},s.prototype._appendQueryString=(()=>{console.trace("Unsupported")}),s.prototype._timeoutError=function(t,e,r){if(this._aborted)return;const o=new Error(`${t+e}ms exceeded`);o.timeout=e,o.code="ECONNABORTED",o.errno=r,this.timedout=!0,this.abort(),this.callback(o)},s.prototype._setTimeouts=function(){const t=this;this._timeout&&!this._timer&&(this._timer=setTimeout(()=>{t._timeoutError("Timeout of ",t._timeout,"ETIME")},this._timeout)),this._responseTimeout&&!this._responseTimeoutTimer&&(this._responseTimeoutTimer=setTimeout(()=>{t._timeoutError("Response timeout of ",t._responseTimeout,"ETIMEDOUT")},this._responseTimeout))}},function(t,e,r){"use strict";const o=r(6);function s(t){if(t)return function(t){for(const e in s.prototype)t[e]=s.prototype[e];return t}(t)}t.exports=s,s.prototype.get=function(t){return this.header[t.toLowerCase()]},s.prototype._setHeaderProperties=function(t){const e=t["content-type"]||"";this.type=o.type(e);const r=o.params(e);for(const t in r)this[t]=r[t];this.links={};try{t.link&&(this.links=o.parseLinks(t.link))}catch(t){}},s.prototype._setStatusProperties=function(t){const e=t/100|0;this.status=this.statusCode=t,this.statusType=e,this.info=1==e,this.ok=2==e,this.redirect=3==e,this.clientError=4==e,this.serverError=5==e,this.error=(4==e||5==e)&&this.toError(),this.created=201==t,this.accepted=202==t,this.noContent=204==t,this.badRequest=400==t,this.unauthorized=401==t,this.notAcceptable=406==t,this.forbidden=403==t,this.notFound=404==t,this.unprocessableEntity=422==t}},function(t,e,r){"use strict";e.type=(t=>t.split(/ *; */).shift()),e.params=(t=>t.split(/ *; */).reduce((t,e)=>{const r=e.split(/ *= */),o=r.shift(),s=r.shift();return o&&s&&(t[o]=s),t},{})),e.parseLinks=(t=>t.split(/ *, */).reduce((t,e)=>{const r=e.split(/ *; */),o=r[0].slice(1,-1);return t[r[1].split(/ *= */)[1].slice(1,-1)]=o,t},{})),e.cleanHeader=((t,e)=>(delete t["content-type"],delete t["content-length"],delete t["transfer-encoding"],delete t.host,e&&(delete t.authorization,delete t.cookie),t))},function(t,e){function r(){this._defaults=[]}["use","on","once","set","query","type","accept","auth","withCredentials","sortQuery","retry","ok","redirects","timeout","buffer","serialize","parse","ca","key","pfx","cert"].forEach(t=>{r.prototype[t]=function(...e){return this._defaults.push({fn:t,args:e}),this}}),r.prototype._setDefaults=function(t){this._defaults.forEach(e=>{t[e.fn].apply(t,e.args)})},t.exports=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,